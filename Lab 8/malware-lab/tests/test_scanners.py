# ---------------------------------------------------------------------------
# tests/test_scanners.py  – unit tests for all four family scanners
# ---------------------------------------------------------------------------
"""Pytest smoke‑tests that the *scan_file()* helper in each family scanner
returns a valid *ScanResult* object and that monkey‑patching works.

The tests deliberately patch *load_apk* and *detect* to avoid the heavy
Androguard dependency and make the unit tests finish in milliseconds.
"""

from __future__ import annotations

import importlib
from pathlib import Path
from typing import Tuple, Any, Dict

import pytest

# ---------------------------------------------------------------------------
# Helper fixtures
# ---------------------------------------------------------------------------


@pytest.fixture()
def dummy_apk(tmp_path: Path) -> Path:
    """Create a tiny dummy APK (just a ZIP header) in a tmp dir."""

    apk_path = tmp_path / "dummy.apk"
    apk_path.write_bytes(b"PK\x03\x04")  # minimal ZIP header
    return apk_path


# ---------------------------------------------------------------------------
# Parameters: (module import path, family name expected)
# ---------------------------------------------------------------------------

SCANNERS: Tuple[Tuple[str, str], ...] = (
    ("scripts.scan_zniu", "ZNIU"),
    ("scripts.scan_rootstv", "ROOTSTV"),
    ("scripts.scan_slocker", "SLOCKER"),
    ("scripts.scan_xloader", "XLOADER"),
)


# ---------------------------------------------------------------------------
# Tests
# ---------------------------------------------------------------------------


@pytest.mark.parametrize("module_path,family", SCANNERS)
def test_scan_file_no_detection(monkeypatch: pytest.MonkeyPatch, dummy_apk: Path, module_path: str, family: str) -> None:
    """Verify scan_file() returns *detected=False* when detect() is patched.

    This keeps the test independent of real APK samples and Androguard.
    """

    module = importlib.import_module(module_path)

    # Patch the heavyweight helpers with stubs.
    monkeypatch.setattr(module, "load_apk", lambda p: ("APK", ["DEX"], "DX"))
    monkeypatch.setattr(module, "detect", lambda sample, analysis, rule: (False, {}))

    result = module.scan_file(dummy_apk)
    assert result.detected is False
    assert result.rule.name == family
    assert result.apk_path == dummy_apk


@pytest.mark.parametrize("module_path,family", SCANNERS)
def test_scan_file_positive(monkeypatch: pytest.MonkeyPatch, dummy_apk: Path, module_path: str, family: str) -> None:
    """Patch detect() to *True* to ensure ScanResult reflects detection."""

    module = importlib.import_module(module_path)

    monkeypatch.setattr(module, "load_apk", lambda p: ("APK", ["DEX"], "DX"))
    monkeypatch.setattr(module, "detect", lambda sample, analysis, rule: (True, {"dummy": ["hit"]}))

    result = module.scan_file(dummy_apk)
    assert result.detected is True
    assert result.evidence["dummy"] == ["hit"]
    assert result.rule.name == family
