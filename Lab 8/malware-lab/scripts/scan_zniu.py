# ---------------------------------------------------------------------------
# scripts/scan_zniu.py  –  Static scanner for the **ZNIU** malware family
# ---------------------------------------------------------------------------
"""Command‑line utility that detects ZNIU‑family traits in a single APK.

Usage (from repo root) ::

    python -m scripts.scan_zniu PATH/TO/app.apk [--json-dir DIR]

The scanner relies only on *static* analysis and the helper utilities living in
``scripts.common``.  It performs the following steps:

1. Load & decompile the APK via :pyfunc:`scripts.common.load_apk` (Androguard).
2. Run :pyfunc:`scripts.common.detect` with the ZNIU rule‑set.
3. Emit a JSON report under *reports/json/* and log a concise verdict.

The module can also be imported programmatically::

    from scripts.scan_zniu import scan_file
    result = scan_file(Path("sample.apk"))
    print(result.detected, result.evidence)
"""

from __future__ import annotations

import argparse
import json
import sys
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Tuple

from scripts.common import RULES, FamilyRule, detect, load_apk

# ---------------------------------------------------------------------------
# Data classes
# ---------------------------------------------------------------------------

@dataclass
class ScanResult:
    """Lightweight container returned by :func:`scan_file`."""

    apk_path: Path
    detected: bool
    evidence: Dict[str, Any]
    rule: FamilyRule

    def to_json(self) -> str:
        return json.dumps(
            {
                "sample": self.apk_path.name,
                "family": self.rule.name,
                "detected": self.detected,
                "evidence": self.evidence,
            },
            indent=2,
            ensure_ascii=False,
        )


# ---------------------------------------------------------------------------
# Core logic
# ---------------------------------------------------------------------------

FAMILY_NAME = "ZNIU"
RULE: FamilyRule = RULES[FAMILY_NAME]




def scan_file(apk_path: Path) -> ScanResult:
    """Analyse *apk_path* and return a :class:`ScanResult`."""

    if not apk_path.is_file():
        raise FileNotFoundError(apk_path)

    # Decompile / load with androguard
    a, d, dx = load_apk(apk_path)

    detected, evidence = detect(str(apk_path), (a, d, dx), RULE)

    return ScanResult(apk_path=apk_path, detected=detected, evidence=evidence, rule=RULE)


# ---------------------------------------------------------------------------
# CLI entry‑point
# ---------------------------------------------------------------------------

def _cli(argv: list[str] | None = None) -> None:  # noqa: D401 – internal helper
    """Parse CLI args and run the scan."""

    parser = argparse.ArgumentParser(
        prog="scan_zniu",
        description="Static detector for the ZNIU Android malware family.",
    )
    parser.add_argument("apk", type=Path, help="Path to the target .apk file")
    parser.add_argument(
        "--json-dir",
        type=Path,
        default=Path("reports/json"),
        help="Directory where JSON report will be written (created if absent)",
    )

    args = parser.parse_args(argv)

    try:
        result = scan_file(args.apk)
    except KeyboardInterrupt:
        print("[!] Aborted by user", file=sys.stderr)
        sys.exit(130)
    except Exception as exc:  # broad, but we want to trap everything for CLI
        print(f"[!] Error: {exc}", file=sys.stderr)
        sys.exit(1)

    # ------------------------------------------------------------------
    # Emit human‑readable verdict
    # ------------------------------------------------------------------

    tick = "✅" if result.detected else "❌"
    print(f"{tick} {FAMILY_NAME} detection – {result.apk_path.name} – evidence = {len(result.evidence)}")

    # ------------------------------------------------------------------
    # Write JSON report
    # ------------------------------------------------------------------

    json_dir: Path = args.json_dir
    json_dir.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    report_path = json_dir / f"{result.apk_path.stem}_{FAMILY_NAME.lower()}_{timestamp}.json"
    report_path.write_text(result.to_json(), encoding="utf-8")
    print(f"[+] JSON report saved to => {report_path}")


# When executed as a script ---------------------------------------------------
if __name__ == "__main__":
    _cli()
