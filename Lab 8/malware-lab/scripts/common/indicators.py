# ---------------------------------------------------------------------------
# scripts/common/indicators.py
# ---------------------------------------------------------------------------

"""Static indicator database and detection logic for each malware family."""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Dict, List, Set, Tuple


@dataclass(slots=True)
class FamilyRule:
    """Heuristic rules required to assert the presence of a malware family."""

    name: str
    needs_perm: Set[str] = field(default_factory=set)
    api_contains: List[str] = field(default_factory=list)
    native_contains: List[str] = field(default_factory=list)
    string_contains: List[str] = field(default_factory=list)
    threshold: int = 1  # minimal number of satisfied categories to flag sample


RULES: Dict[str, FamilyRule] = {
    "ZNIU": FamilyRule(
        name="ZNIU",
        needs_perm={"WRITE_SECURE_SETTINGS"},
        api_contains=["Runtime.exec", " su "],
        native_contains=["libjni_zniu.so"],
        threshold=2,
    ),
    "ROOTSTV": FamilyRule(
        name="ROOTSTV",
        needs_perm={"REQUEST_INSTALL_PACKAGES"},
        api_contains=["DexClassLoader", "chmod", "pm install"],
        threshold=2,
    ),
    "SLOCKER": FamilyRule(
        name="SLOCKER",
        needs_perm={"BIND_DEVICE_ADMIN"},
        api_contains=["Cipher.doFinal", "AES"],
        string_contains=["bitcoin", "decrypt file", "your files"],
        threshold=2,
    ),
    "XLOADER": FamilyRule(
        name="XLOADER",
        needs_perm={"READ_SMS", "SEND_SMS"},
        api_contains=["SmsManager.sendTextMessage", "AccessibilityService"],
        string_contains=["bank", "account", "login"],
        threshold=2,
    ),
}


def detect(sample_name: str, analysis, rule: FamilyRule):
    """Return (detected: bool, evidence: dict) for *sample* under *rule*.

    Parameters
    ----------
    sample_name : str
        Human‑readable identifier (filename) – used only for evidence output.
    analysis : tuple
        The (a, d, dx) triple returned by :func:`andro_utils.load_apk`.
    rule : FamilyRule
        The heuristics corresponding to one malware family.
    """
    a, d, dx = analysis
    evidence: Dict[str, List[str]] = {
        "permissions": [],
        "apis": [],
        "natives": [],
        "strings": [],
    }
    score = 0

    # ----- permissions ------------------------------------------------------
    perm_hit = rule.needs_perm & set(a.get_permissions())
    if perm_hit:
        evidence["permissions"] = list(perm_hit)
        score += 1

    # ----- API calls --------------------------------------------------------
    apk_methods = [
        f"{m.get_method().get_class_name()}->{m.get_method().get_name()}"
        for m in dx.get_methods()
        if not m.is_external()
    ]
    for api_sig in rule.api_contains:
        if any(api_sig in m for m in apk_methods):
            evidence["apis"].append(api_sig)
    if evidence["apis"]:
        score += 1

    # ----- native libraries -------------------------------------------------
    natives = [name for name, _ in a.get_files_types().items() if name.endswith(".so")]
    native_hit = [n for n in natives if any(sig in n for sig in rule.native_contains)]
    if native_hit:
        evidence["natives"] = native_hit
        score += 1

    # ----- string literals --------------------------------------------------
    string_literals: list[str] = []
    if isinstance(d, (list, tuple)):
        for dex in d:
            string_literals.extend(dex.get_strings())
    else:
        string_literals.extend(d.get_strings())

    for lit in string_literals:
        for sig in rule.string_contains:
            if sig.lower() in lit.lower():
                evidence["strings"].append(sig)
                break
    if evidence["strings"]:
        score += 1

    detected = score >= rule.threshold
    return detected, evidence
