# ---------------------------------------------------------------------------
# scripts/scan_rootstv.py  –  Static scanner for the **ROOTSTV** malware family
# ---------------------------------------------------------------------------
"""Command‑line utility that detects ROOTSTV‑family traits in a single APK.

Usage (from repo root) ::

    python -m scripts.scan_rootstv PATH/TO/app.apk [--json-dir DIR]

The scanner relies solely on *static* analysis, leveraging the helper
utilities from ``scripts.common``.  It follows the same structure as
``scan_zniu.py`` and can serve as a template for further families.

Key differences vs ZNIU scanner
--------------------------------
* Uses the **ROOTSTV** rule‑set from :pymod:`scripts.common.indicators`.
* Adds a guard so the list returned by ``load_apk`` for *d* is reduced to a
  single ``DalvikVMFormat`` object – avoiding the current ``list``/``get_strings``
  mismatch in the shared ``detect()`` helper.

The module can also be imported programmatically::

    from scripts.scan_rootstv import scan_file
    result = scan_file(Path("sample.apk"))
    print(result.detected, result.evidence)
"""

from __future__ import annotations

import argparse
import json
import sys
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List

from scripts.common import RULES, FamilyRule, detect, load_apk

# ---------------------------------------------------------------------------
# Data classes
# ---------------------------------------------------------------------------

@dataclass
class ScanResult:
    """Container returned by :func:`scan_file`."""

    apk_path: Path
    detected: bool
    evidence: Dict[str, Any]
    rule: FamilyRule

    def to_json(self) -> str:
        return json.dumps(
            {
                "sample": self.apk_path.name,
                "family": self.rule.name,
                "detected": self.detected,
                "evidence": self.evidence,
            },
            indent=2,
            ensure_ascii=False,
        )


# ---------------------------------------------------------------------------
# Core logic
# ---------------------------------------------------------------------------

FAMILY_NAME: str = "ROOTSTV"
RULE: FamilyRule = RULES[FAMILY_NAME]


def _first_dex(d_obj) -> Any:
    """Return a single :class:`DalvikVMFormat` from *d_obj*.

    Androguard's :func:`AnalyzeAPK` returns *d* as a list when the APK
    contains multiple DEX files.  The current implementation of
    :pyfunc:`scripts.common.detect` expects an object that exposes
    ``.get_strings()``, so we take the *first* DEX for now.
    """

    if isinstance(d_obj, (list, tuple)):
        return d_obj[0]
    return d_obj


def scan_file(apk_path: Path) -> ScanResult:
    """Analyse *apk_path* and return a :class:`ScanResult`."""

    if not apk_path.is_file():
        raise FileNotFoundError(apk_path)

    a, d, dx = load_apk(apk_path)

    # TEMP fix until detect() handles multi‑dex gracefully -----------------
    d_single = _first_dex(d)

    detected, evidence = detect(str(apk_path), (a, d_single, dx), RULE)

    return ScanResult(apk_path=apk_path, detected=detected, evidence=evidence, rule=RULE)


# ---------------------------------------------------------------------------
# CLI entry‑point
# ---------------------------------------------------------------------------

def _cli(argv: List[str] | None = None) -> None:
    """Parse CLI args and run the scan."""

    parser = argparse.ArgumentParser(
        prog="scan_rootstv",
        description="Static detector for the ROOTSTV Android malware family.",
    )
    parser.add_argument("apk", type=Path, help="Path to the target .apk file")
    parser.add_argument(
        "--json-dir",
        type=Path,
        default=Path("reports/json"),
        help="Directory where JSON report will be written (created if absent)",
    )

    args = parser.parse_args(argv)

    try:
        result = scan_file(args.apk)
    except KeyboardInterrupt:
        print("[!] Aborted by user", file=sys.stderr)
        sys.exit(130)
    except Exception as exc:
        print(f"[!] Error: {exc}", file=sys.stderr)
        sys.exit(1)

    # ----------------------------- output ---------------------------------

    tick = "✅" if result.detected else "❌"
    print(
        f"{tick} {FAMILY_NAME} detection – {result.apk_path.name} – "
        f"evidence = {len(result.evidence)}"
    )

    # Write JSON report ----------------------------------------------------

    json_dir: Path = args.json_dir
    json_dir.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.utcnow().strftime("%Y%m%dT%H%M%SZ")
    report_path = json_dir / f"{result.apk_path.stem}_{FAMILY_NAME.lower()}_{timestamp}.json"
    report_path.write_text(result.to_json(), encoding="utf-8")
    print(f"[+] JSON report saved to => {report_path}")


# ---------------------------------------------------------------------------
# Script entry‑point --------------------------------------------------------

if __name__ == "__main__":
    _cli()
