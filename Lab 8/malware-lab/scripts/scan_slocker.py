# ---------------------------------------------------------------------------
# scripts/scan_slocker.py  –  Static scanner for the **SLOCKER** ransomware
# ---------------------------------------------------------------------------
"""Command-line utility that detects Slocker Android ransomware traits.

Usage (from repo root) ::

    python -m scripts.scan_slocker PATH/TO/app.apk [--json-dir DIR]
"""

from __future__ import annotations

import argparse
import json
import sys
from dataclasses import dataclass
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, Dict

from scripts.common import RULES, FamilyRule, detect, load_apk

# ---------------------------------------------------------------------------
# Data container
# ---------------------------------------------------------------------------


@dataclass
class ScanResult:
    """Lightweight container returned by :func:`scan_file`."""

    apk_path: Path
    detected: bool
    evidence: Dict[str, Any]
    rule: FamilyRule

    def to_json(self) -> str:
        return json.dumps(
            {
                "sample": self.apk_path.name,
                "family": self.rule.name,
                "detected": self.detected,
                "evidence": self.evidence,
            },
            indent=2,
            ensure_ascii=False,
        )


# ---------------------------------------------------------------------------
# Core logic
# ---------------------------------------------------------------------------

FAMILY_NAME = "SLOCKER"
RULE: FamilyRule = RULES[FAMILY_NAME]


def scan_file(apk_path: Path) -> ScanResult:
    """Analyse *apk_path* and return a :class:`ScanResult`."""

    if not apk_path.is_file():
        raise FileNotFoundError(apk_path)

    a, d, dx = load_apk(apk_path)
    detected, evidence = detect(str(apk_path), (a, d, dx), RULE)

    return ScanResult(apk_path=apk_path, detected=detected, evidence=evidence, rule=RULE)


# ---------------------------------------------------------------------------
# CLI entry-point
# ---------------------------------------------------------------------------


def _cli(argv: list[str] | None = None) -> None:
    """Parse CLI args and run the scan."""

    parser = argparse.ArgumentParser(
        prog="scan_slocker",
        description="Static detector for the Slocker Android ransomware family.",
    )
    parser.add_argument("apk", type=Path, help="Path to the target .apk file")
    parser.add_argument(
        "--json-dir",
        type=Path,
        default=Path("reports/json"),
        help="Directory where JSON report will be written (created if absent)",
    )

    args = parser.parse_args(argv)

    try:
        result = scan_file(args.apk)
    except KeyboardInterrupt:
        print("[!] Aborted by user", file=sys.stderr)
        sys.exit(130)
    except Exception as exc:  # noqa: BLE001
        print(f"[!] Error: {exc}", file=sys.stderr)
        sys.exit(1)

    # ── human-readable verdict ────────────────────────────────────────────
    tick = "✅" if result.detected else "❌"
    print(
        f"{tick} {FAMILY_NAME} detection – "
        f"{result.apk_path.name} – evidence = {len(result.evidence)}"
    )

    # ── JSON report ───────────────────────────────────────────────────────
    json_dir: Path = args.json_dir
    json_dir.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
    report_path = json_dir / f"{result.apk_path.stem}_{FAMILY_NAME.lower()}_{timestamp}.json"
    report_path.write_text(result.to_json(), encoding="utf-8")
    print(f"[+] JSON report saved to => {report_path}")


# ---------------------------------------------------------------------------
# When executed directly
# ---------------------------------------------------------------------------

if __name__ == "__main__":
    _cli()
